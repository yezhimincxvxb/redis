### 主从同步的弊端？
主从同步模式：主节点挂了，需要手动选举从节点升级为主节点，同时需要通知其余从节点重新挂载新的主节点。

### 哨兵模式
哨兵模式(Sentinel)是一个分布式架构，其中包含若干个Sentinel节点和主从节点，每个Sentinel节点会对主从节点和其余Sentinel节点进行监控。
哨兵是作为一个独立进程运行。通常是多个哨兵进行互相监控。

当Sentinel发现节点不可达时，会对节点做下线标识。
主观下线：
假设主节点挂了，哨兵1先检测到这个结果，系统并不会马上进行故障切换，仅仅是哨兵1主观的认为主节点不可用，这个现象成为主观下线。
客观下线：
当其余的哨兵也检测到主节点不可达，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果：选举出一个哨兵节点来完成自动故障转移的工作。
切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从节点实现切换主节点地址，这个过程称为客观下线。

工作原理：
每隔一秒，每个Sentinel节点会向主节点、从节点、其余Sentinel节点发送一条ping命令。
作用：心跳检测，来确认这些节点当前是否可达。
每隔2秒，每个Sentinel节点会向主节点的__sentinel__:hello这个channel中发送自己掌握的集群信息和自己的一些信息（比如host,ip,run id），这个是利用redis的发布/订阅功能，
每个sentinel节点都会订阅这个channel，也就是说，每个sentinel节点都可以知道别的sentinel节点掌握的集群信息。
作用：信息交换，了解别的sentinel的信息和他们对于主节点的判断
每隔10秒，每个Sentinel节点会向主节点和从节点发送info命令。
作用：发现最新的集群拓扑结构

### 配置
新建3个sentinel哨兵配置文件
sentinel-26381.conf、sentinel-26382.conf、sentinel-26383.conf
------------------------------------------内容--------------------------------------
#端口
port 26381

#绑定IP
bind 192.168.101.129

#关闭保护模式
protected-mode no

#守护进程，后台启动
daemonize yes

#进程ID
pidfile "/var/run/redis-sentinel-26381.pid"

#日志文件
logfile "/usr/local/redis/redis-6.2.4/logs/log-26381.log"
dir "/tmp"

#哨兵模式
#初始主节点 2表示判断主节点下线需要2个哨兵决定
sentinel monitor mymaster 192.168.101.129 16381 2
#主节点密码
sentinel auth-pass mymaster 3Q3Q
------------------------------------------内容--------------------------------------

